// variables
	@route:'../assets/img/';
	@img:
		'osx-high-sierra.jpg',
		'osx-leopard.png',
		'osx-lion.png',
		'osx-mavericks.png',
		'osx-mojave.jpg',
		'osx-mojave-night.jpg',
		'osx-mountain-lion.jpg',
		'osx-sierra.jpg',
		'osx-snow-leopard.png';
// mixin parametrico attrib normalize
	.normalize(@m:0; @p:0; @b:none; @o: none; @ba:border; @ma:margin; @pa:padding; @oa: outline){
		@{ma}:@m;
		@{oa}:@o;
		@{ba}:@b;
		@{pa}:@p;
	}
// mixin parametrico flexbox
	.flexbox (@fd:row; @fj:center; @fa:unset; @fw: wrap; @f:flex){
		display: @f;
		flex-direction: @fd;
		justify-content: @fj;
		align-items: @fa;
		flex-wrap: @fw;
	}
// mixin parametrico position
	.position(@p:absolute; @t:unset; @r:unset; @b:unset; @l:unset; @z:1){
		position: 	@p;
		top: 		@t;
		right: 		@r;
		bottom: 	@b;
		left: 		@l;
		z-index: 	@z;
	}
// mixin recursivo backgrounds
	.bg-slides(@i:1) when(@i <= length(@img)){
		@bg: extract(@img, @i);
		&:nth-child(@{i}){
			background-image: url('@{route}@{bg}')
		}
		.bg-slides(@i + 1);
	}
// implementacion del mixin
	#header{
		.normalize(@p:1rem);
		.flexbox(column);
		h1, p{ .normalize }
		button{ .normalize(@p: 1.5rem) }
		.prev{ .position(@t:0; @b:0; @l:0) }
		.next{ .position(@t:0; @r:0; @b:0) }
	}
	ul.slide{
		.normalize;
		.position(@t:0, @l: 0, @z: -1);
		li{
			.position(@t:0, @l: 0, @z: -1);
			.bg-slides;
			opacity: 0;
		}
	}
// animaciones con less
	@functions: lineal, cuadratica, trigonometrica, exponencial, limite;
	.dir{ 
		min-height: 100vh;
		div{
			width: 3rem;
			height: 3rem;
			color: var(--snd);
			background-color: var(--fst);
			.childs;
	}	}

	/* mixins recursivo nth-childs*/
		.childs(@n: 1; @max:@functions) when(@n <= length(@max)){
			&:nth-child(@{n}){
				@f: extract(@max, @n);
				animation: @f 5s linear @n * 2s;
				animation-iteration-count: infinite;
				animation-fill-mode: backwards;
			} .childs(@n + 1);
		}
	/* mixins recursivo keyframes */
		.keyFrames (@n:1) when (@n <= length(@functions)){
			@f: extract(@functions, @n);
			@keyframes @f{
			.animate(@x:-20px; @i: 0%) when (@i <= 100%){
				@{i}{
					transform:
						if( @f = lineal, 
							translate(@x + 20px, ( @x / 2px)),
						if(	@f = cuadratica,
							translate(@x + 20px, (pow(@x, 2px))),
						if( @f = trigonometrica,
							translate(@x + 20px, (sin(@x) * 50px)),
						if( @f = exponencial,
							translate(@x + 20px, pow(1.2px, @x)),
							translate(@x + 20px, (1 /(@x + 20.1px)))	
						)	)	)	);
				}	.animate(@x + 5; @i + 5);
			}	.animate;
		}	.keyFrames(@n + 1);
	}	.keyFrames;