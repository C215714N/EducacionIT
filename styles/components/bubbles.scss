@use "sass:math";
// Declaraciones
$functions: 
    lineal,  // ax + b
    cuadratica, // ax^2 + bx + c
    trigonometrica, // sin(x)
    exponencial, // n^x
    limite // n/x => limite
;

$directions: normal, reverse, alternate, alternate-reverse;


@mixin gradient($type: linear, $dir: 0deg, $colors: (#224 25%, #eee 40%, #248)){
    background: #{$type}-gradient($dir, $colors)
}  
.min-vh100{
    min-height: min(100vh, 720px);
    overflow: hidden;
    position: relative;
}
.sea{
    animation: sea 10s linear alternate infinite;
    @include gradient;
    width: 100%;
    height: 100%;
    .rotate{
        animation-name: rotate;
        animation-duration: 10s;
        animation-fill-mode: backwards;
        animation-iteration-count: infinite;
        @for $i from 1 through length($directions){
            &:nth-child(#{$i}n){
                animation-direction: nth($directions, $i);
        } }
    }
    .bubble{
        width: 3rem;
        height: 3rem;
        margin: .5rem;
        border-radius: 50%;
        background-color: #36c;
        box-shadow: 
            -.25rem .25rem .5rem #333,
            -.5rem .5rem .1rem  #eee5 inset;
            @for $i from 1 through length($functions){
                &:nth-child(#{$i}n){
                    @include gradient(
                        radial,
                        circle at top right, ( 
                            hsla($i * 30deg, 50%, 50%, .5),
                            hsla($i * 60deg, 50%, 50%, .5) 
                    ) );
                    animation: nth($functions, $i) 5s linear $i * .25s alternate infinite;
                }
            }
            @for $i from 1 through length($functions){
                &:nth-child(#{$i + length($functions)}n){
                    @include gradient(
                        radial,
                        circle at top right, ( 
                            hsla($i * 120deg, 50%, 50%, .3),
                            hsla($i * 60deg, 50%, 50%, .3) 
                    ) );
                    animation: nth($functions, $i)+'-alt' 5s linear $i * .25s alternate infinite;
                }
            }
    }
}

// Function: Bloque de codigo que debe retornar una valor
@function graphic($x, $f){
    $unit: $x;
    @if $f == lineal{ $unit: $x / 2 }
    @if $f == cuadratica{ $unit: math.pow($x - 50, 2)  / 25 }
    @if $f == trigonometrica{ $unit: math.sin($x) * 4 }
    @if $f == exponencial{ $unit: math.pow(1.025, $x) }
    @if $f == limite{
        @if $x == 50 { $unit: 0 }
        @else { $unit: 100 / ($x - 50)}
    }
    @return $unit;
}
/* Fotogramas */
@keyframes sea{
@for $i from 0 through 100{
    #{$i * 1%}{
    @include gradient($dir: ($i * 30 / 100) - 15deg);
} } }

@each $f in $functions{
    @keyframes #{$f}{
    @for $i from 0 through 100{
        #{$i * 1%}{
            transform: translate($i * 1vw, graphic($i, $f) * 1vh);
    } } }
    @keyframes #{$f}-alt{
    @for $i from 0 through 100{
        #{$i * 1%}{
            transform: translate(graphic($i, $f) * 1vw, $i * 1vh);
    } } } 
}

@keyframes rotate{
    from{ 
        transform: rotate(0deg); 
    }
    to{ 
        transform: rotate(360deg); 
    }
}