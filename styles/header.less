// Variables: valores almacenados en la memoria
    // color palletes    
        @color: #eee;
        @bg-color: #448;
    //  sizes
        @r: .25rem;
        @col: 24;
    //  media screen
        @smartphone: 540px;
        @tablet: 768px;
        @laptop: 992px;
        @desktop: 1200px;
// Nesting: selectores que se anidan dentro de otros
    body{
        &:extend(.zeroise);
    }
    /* Main heading */
    #header{
        color: @color;
        background-color: @bg-color;
        .flexbox(@jc:space-between);
        .normalize;
        .position(sticky; @z:2);
        @media screen and (min-width: @laptop){
            justify-content: space-around;
        }
        @media screen and (min-width: @desktop){
            justify-content: center;
        }
        nav{
        // navigation bar
            .menu{
                background-color: @bg-color;
                height: 100%;
                .normalize(@p:.5rem 1rem);
                .position(fixed, @x: -100%, @z:1);
                &.active{ left:0; }
                @media screen and (min-width: @tablet){
                    .flexbox;
                    .position;
                }
                li{
                    &:extend(.unstyled);
                    .normalize(.25rem, .5rem);
                }
            }
        // menu button
            .fa-bars,
            .fa-times{
                @r: 1rem;
                color: @color;
                background-color: transparent;
                .radius;
                @media screen and (min-width: @tablet){
                    display: none;
                }
            }
        // menu links
            a{
                color: lighten(@color, 10%);
                &:extend(.unstyled);
                &:hover{
                    text-shadow: 0 0 .5rem @color;
                }
                &.fa-arrow-up{
                    opacity: .3;
                    background-color: @bg-color;
                    .normalize(1rem; .5rem; 1px solid @bg-color);
                    .position(fixed; @z: 1; @x-axis: right; @y-axis:bottom);
                    &:hover{
                        opacity: .7;
                    }
                }
            }
        }
    }
    /* Content heading */
    header{
        .normalize(.25rem 0, 1rem);
        p{
            &:extend(.zeroise);
        }
    }
//  Mixins: estilos que se aplican como atributos
    /* helpers */
    .zeroise{
        .normalize;
    }
    .unstyled{
        list-style: none;
        text-decoration: none;
    }
    .radius{
        -webkit-border-radius: @r;
        -moz-border-radius: @r;
        -ms-border-radius: @r;
        -o-border-radius: @r;
        border-radius: @r;
    }
//  Mixins parametricos: estilos que reciben argumentos
    .normalize(@m:0; @p:0; @b:0){
        margin: @m;
        border: @b;
        padding: @p;
    }
    .flexbox(
        @fd: row;
        @jc: center;
        @ai: center;
        @fw: wrap;
        @d: flex
    ){
        display: @d;
        flex-direction: @fd;
        justify-content: @jc;
        align-items: @ai;
        flex-wrap: @fw;
    }
    .position(
        @p: relative; @x: 0; @y: 0; @z: 0; 
        @x-axis: left; @y-axis: top
    ){
        position:@p;
        @{x-axis}: @x;
        @{y-axis}: @y;
        z-index: @z;
    }
//  Mixin recursivo: estilos que se repiten en base a una condicion
    //  heading styles 
        .headings(@i:1) when (@i <= 6){
            h@{i}{
                &:extend(.zeroise);
            }
            .headings(@i + 1);
        }
        .headings;
    /* heading colors per section */
        .titles(@n; @i:1) when (@i <= @n){
            &:nth-child(@{i}n) .header{
                background: linear-gradient(
                    to right,
                    hsl(@i * 30, 50%, 50%),
                    hsl( @i * 60, 50%, 50%)
                );
            }
            .titles(@n; @i + 1);
        }
        section{
            .header{
                color: @color;
                text-shadow: 0 0 .5rem darken(@bg-color, 20%);
            }
            .titles(12);
        }
    /* grid system  columns */
        .grid(@i: 1) when (@i <= @col){
            .col-@{i}{
                width: percentage( ( @i / @col ) );
            }
            .grid(@i + 1);
        }
        .grid;