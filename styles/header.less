// Variable: Espacio reservado en memoria cuyo valor puede cambiar
@primary: #448;
@light: #eee;
@dark: #333;
@p: relative;

// Nesting: Anidacion de selectores para lograr una mayor especificidad
#header{
    @primary: #4488;
    @dark: #3338;
    .flexbox(column);
    .normalize(1.5rem 1rem);
    min-height: ~'min(100vh, 640px)';
    color: @light;
    background: linear-gradient(@primary, @dark);
    h1{
        font-family: 'techno';
    }
    p{
        &:extend(.zeroise);
    }
}
.gallery{
    .position;
    .slide{
        &:extend(.zeroise);
        &:extend(.unstyled);
        .item{
            &:extend(.cover);
            opacity: 0;
            background: var(--bg) center/cover;
            &.active{
                opacity: 1;
            }
        }
    }
    button{
        .position(absolute; @h: bottom);
        .normalize(1rem 10vw);
        color: @light;
        background-color: transparent;
        opacity: .3;
        &:hover{
            opacity: .7;
        }
        &.icon-{
            &prev{
                left: 0;
            }
            &next{
                right: 0;
            }
        }
    }
}

// Mixin: Estilos que se utilizan como atributos dentro de un selector
.zeroise{
    .normalize;
}
.unstyled{
    list-style: none;
    text-decoration: none;
}
.cover{
    .position(absolute; @z: -1);
    width: 100%;
    height: 100%;
}
// Mixin parametrico: Estilos que requieren argumentos para aplicarse
.normalize(@p: 0; @m: 0; @b: 0){
    margin: @m;
    border: @b;
    padding: @p;
}
.flexbox(
    @fd: row;
    @jc: center;
    @ai: center;
    @fw: wrap;
    @d: flex
){
    display: @d;
    flex-direction: @fd;
    justify-content: @jc;
    align-items: @ai;
    flex-wrap: @fw;
}
.position(@p: relative; @x: 0; @y: 0; @z: 0; @v: top; @h: left){
    position: @p;
    @{v}: @y;
    @{h}: @x;
    z-index: @z;
    
}

